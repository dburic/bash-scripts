#!/bin/bash

##include head.sh
sourcelib "common"

# Set some traps
trap "die SIGTERM" TERM HUP
trap "die SIGINT"  INT

# How many CPUs do we have?
cpucount() {
    local n=$(grep -c '^processor\b' /proc/cpuinfo)
    [ $n -eq 0 ] && n=1
    echo $n
}

# Defaults
MAXPROCS=$(cpucount)
MAXARGS=1
NICEADJ=0
VERBOSE=false
USESHELL=false

# Show a nice help message
showhelp() {
    cat <<"EOF"
par - wrapper around xargs for easy execution of parallel jobs

Usage
    par [OPTION...] [-- COMMAND [ARG...]]

Description
    There are two intended use cases for this script, in which the user can
    save a couple of keystrokes over using xargs directly.
    
    In the first case, arguments are read from stdin, one per line, and are
    passed to the specified command, one or more at a time, as specified by
    the --max-args option.

    In the seconds case, whole commands are read from stdin, one per line,
    and are passed to the user's preferred shell. This makes it possible to
    use piping and redirection.

Options
    -P, --max-procs NUM     Max number of processes to run in parallel
                            (default is number of processors in /proc/cpuinfo)
    -n, --max-args NUM      Max number of arguments per command
                            (default is 1)
    -N, --nice NUM          Adjust niceness
    -v, --verbose           Print each executed command
    -s, --shell             Pass the command to user's preferred shell
                            (needed with pipes and redirects)

Examples
    # The following examples also show how xargs is called, assuming that
    # the variable P holds the number of processors, ie 
    #
    #     P=$(grep -c '^processor\b' /proc/cpuinfo)

    # Encode WAV files with oggenc
    ls *.wav | par -v -- oggenc -Q -q 3.5

             # ^^^^^^^^^^^^^^^^^^^^^^^^^^
             # xargs -d '\n' -n 1 -P $P -t oggenc -Q -q 3.5

    # Encode WAV files with lame
    for f in *.wav; do
        echo "$f"
        echo "mp3/${f%.*}.mp3"
    done | par -v -n 2 -- lame --quiet --preset extreme

         # ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         # xargs -d '\n' -n 2 -P $P -t lame --quiet --preset extreme

    # Convert PBM files to TIFF
    for f in *.pbm; do
        echo "pnmtotiff -g4 '$f' > 'out/${f%.*}.tif'" 
    done | par -v -N 10 -P 4 -s
        
         # ^^^^^^^^^^^^^^^^^^^^
         # nice -n 10 xargs -d '\n' -n 1 -P 4 -t $SHELL -c
EOF
}

# Command line processing
TEMP=$(getopt \
        -l help,max-procs:,max-args:shell,verbose,nice: \
        -o hP:n:svN: \
        -- "$@") || die INVOPT
eval set -- "$TEMP"

while true; do
    case "$1" in
        -h|--help)
            showhelp
            exit 0;;
        -P|--max-procs)
            ispsint "$2" || die INVVAL "$2"
            MAXPROCS=$2
            shift 2;;
        -n|--max-args)
            ispsint "$2" || die INVVAL "$2"
            MAXARGS=$2
            shift 2;;
        -N|--nice)
            isnnint "$2" || die INVVAL "$2"
            NICEADJ=$2
            shift 2;;
        -v|--verbose)
            VERBOSE=true
            shift;;
        -s|--shell)
            USESHELL=true
            shift;;
        --)
            shift
            break;;
        -*)
            die UNPROCOPT;;
    esac
done

# Main logic
XARGS="xargs -d \n -n $MAXARGS -P $MAXPROCS"
$VERBOSE && XARGS+=" -t"
[ $NICEADJ -gt 0 ] && XARGS="nice -n $NICEADJ $XARGS"

if $USESHELL; then
    $XARGS $SHELL -c
else
    $XARGS "$@"
fi

