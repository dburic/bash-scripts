#!/bin/bash 

##= head =##

sourcelib "common"

# Defaults
CONFIGFILE="$CONFIGDIR/jump" # File with destinations and directories
JUMPFILE="$HOME/.jump" # File with cd command
MODE="jump" # What to do
ALLOWEDMODES="jump show-config edit-config show-func" # What can be done

# Show a nice help message
showhelp() {
    cat <<EOF
jump - quickly jump to a directory

Usage:
  jump [OPTIONS] [DESTINATIONS]

Options:
  -c, --config F        Specify config file
  -s, --show-config     Show config file
  -e, --edit-config     Edit config file
  -f, --jump-function   Show jump function for .bashrc

EOF
}

# Show config file
showconfig() {
    cat "$CONFIGFILE"
}

# Edit config file
editconfig() {
    local editor="${EDITOR:-editor}"
    exec $editor "$CONFIGFILE"
}

# Show function that has to be added to .bashrc
showfunc() {
    cat <<EOF

jump() { 
    $REALPATH "\$@" && source "\$HOME/.jump"
}
alias j=jump

EOF
}

# Get subdirectory of given directory
getsubdir() {
    local dest="$1"
    [ -n "$dest" ] || return 1
    local dir="$2"
    find -L "$dir" -mindepth 1 -maxdepth 1 -type d -printf '%f\n' | sort | grep -i -m 1 "^$dest"
}

# Get directory from configuration file
getfromconfig() {
    local dest="$1"
    [ -n "$dest" ] || return 1
    perl -e '
# Get destination and config file
$dest = shift(@ARGV);
$configfile = shift(@ARGV);

# Slurp config file
open(FILE, "<", $configfile);
@lines = <FILE>;
close(FILE);
for(@lines) {   
    s/^\s*//; # Remove leading space
    s/\s*$//; # Remove trailing space
} 
@lines = grep(!/^#/, @lines); # Remove comments

# Find lines matching given destination
@match = grep(/^$dest/, @lines);
exit unless @match;

# Extract directory
@fields = split(/\s+/, $match[0], 2);
shift(@fields);
exit unless @fields;
print $fields[0];
' "$dest" "$CONFIGFILE"
}

# Set directory to jump to
setdir() {
    local dest
    local part
    DIR=""
    while [ -n "$1" ]; do
        dest="$1"
        shift
        if [ -z "$DIR" ]; then # First pass
            case "$dest" in
                ".")
                    part=$(pwd);;
                "/"*)
                    [ -d "$dest" ] && part="$dest" || part="";;
                *)
                    part=$(getfromconfig "$dest");;
            esac
        else 
            part=$(getsubdir "$dest" "$DIR")
        fi
        [ -z "$part" ] && errorexit OTHER "unknown destination $dest"
        [ -z "$DIR" ] && DIR="$part" || DIR+="/$part"
    done
}

# Command line processing
TEMP=$(getopt \
        -l help,config:,show-config,edit-config,show-func \
        -o hc:sef \
        -- "$@") || errorexit INVOPT
eval set -- "$TEMP"

while true; do
    case "$1" in
        -h|--help)
            showhelp
            exit;;
        -c|--config)
            CONFIGFILE="$2"
            shift 2;;
        -s|--show-config)
            MODE="show-config"
            shift;;
        -e|--edit-config)
            MODE="edit-config"
            shift;;
        -f|--show-func)
            MODE="show-func"
            shift;;
        --)
            shift
            break;;
        -*)
            errorexit UNPROCOPT;;
    esac
done

# Check that mode is not something unexpected
inlist "$MODE" $ALLOWEDMODES || errorexit OTHER "unknown mode, this should not happen"

# Check that config file exists if mode requires so
[ "$MODE" = "show-func" -o -f "$CONFIGFILE" ] || errorexit NOTFILE "$CONFIGFILE"

# If mode is not jump, empty jump file and call appropriate function
# (mode with hyphens removed)
if [ "$MODE" != "jump" ]; then
    > "$JUMPFILE"
    ${MODE//-/}
    exit
fi

# Get the directory to jump to
if [ -z "$1" ]; then 
    DIR="$HOME"
else
    setdir "$@"
fi

echo "$DIR"
echo "cd \"$DIR\"" > "$JUMPFILE"

