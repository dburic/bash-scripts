#!/bin/bash

##include head.sh
sourcelib "common"

# Defaults
CONFIGFILE="$CONFIGDIR/jump.conf" # File with bookmarks and directories
BOOKMARKS=() # Config file bookmarks
DIRS=() # Config file directories
JUMPDIR="" # Final directory to jump to
SAVEFILE="" # File where $JUMPDIR should be saved
MODE="jump" # What to do
ALLOWEDMODES="jump view-config edit-config which-config" # What can be done
GREP="grep -E -i -m 1" # How to call grep

# Additional error messages
adderrormsgs \
    NOMODE 'unknown mode, this should not happen' \
    NODEST 'unknown destination %s'

# Add bookmark and directory
addbookmarkdir() {
    BOOKMARKS+=("$1")
    DIRS+=("$2")
}

# Read configuration file
readconfig() {
    local l
    while read -r l || [ -n "$l" ]; do
        case "$l" in
            "#"*|"")
                continue;;
        esac
        eval -- "addbookmarkdir $l"
    done < "$CONFIGFILE"
}

# View config file
viewconfig() {
    cat "$CONFIGFILE"
}

# Edit config file
editconfig() {
    local editor="${EDITOR:-editor}"
    $editor "$CONFIGFILE"
}

# Show path of config file
whichconfig() {
    echo "$CONFIGFILE"
}

# Grep bookmarks for given pattern
grepbookmarks() {
    printf '%s\n' "${BOOKMARKS[@]}" | $GREP -n "$1" | cut -d: -f1
}

# Search bookmarks for given destination
searchbookmarks() {
    local dest="$1" k
    readconfig
    if [ "${dest:0:1}" != '^' ]; then
        k=$(grepbookmarks "^$dest")
        [ -z "$k" ] && k=$(grepbookmarks "$dest")
    else
        k=$(grepbookmarks "$dest")
    fi
    [ -z "$k" ] && return # No match
    (( k-- ))
    echo "${DIRS[$k]}"
}

# Sorted list of subdirectories of given directory
listsubdirs() {
    find -L "$1" -mindepth 1 -maxdepth 1 -type d -printf '%f\n' | sort
}

# Search subdirectories of given directory for destination
searchsubdirs() {
    local dest="$1" dir="$2"
    case "$dest" in 
        '.'|'..')
            echo "$dest";;
        'F')
            listsubdirs "$dir" | head -n 1;;
        'L')
            listsubdirs "$dir" | tail -n 1;;
        *)
            local subdir
            if [ "${dest:0:1}" != '^' ]; then
                subdir=$(listsubdirs "$dir" | $GREP "^$dest")
                [ -z "$subdir" ] && subdir=$(listsubdirs "$dir" | $GREP "$dest")
            else 
                subdir=$(listsubdirs "$dir" | $GREP "$dest")
            fi
            echo "$subdir"
            ;;
    esac
}

# Add part to final directory
addpart() {
    local part="$1"
    case "$JUMPDIR" in
        ""|*/) # Empty or ends with slash
            JUMPDIR+="$part";;
        *) # Everything else
            JUMPDIR+="/$part";;
    esac
}

# Set directory to jump to
setjumpdir() {
    local dest part
    while [ $# -gt 0 ]; do
        dest="$1"
        shift
        [ -n "$dest" ] || continue
        if [ -z "$JUMPDIR" ]; then # First pass
            case "$dest" in
                ".")
                    part=$(pwd);;
                "..")
                    part=$(dirname "$(pwd)");;
                "/"*)
                    [ -d "$dest" ] && part="$dest" || part="";;
                *)
                    part=$(searchbookmarks "$dest");;
            esac
        else # Not first pass
            part=$(searchsubdirs "$dest" "$JUMPDIR")
        fi
        [ -z "$part" ] && die NODEST "$dest"
        addpart "$part"
    done
}

# Show a nice help message
showhelp() {
    cat <<"EOF"
jump - quickly jump to a directory

Usage
    jump [OPTION...] [DESTINATION...]

Description
    The first destination can be be an absolute path to a directory, one
    (.) or two (..) dots for the current or parent directory, a tilde (~)
    for the home directory, or a regular expression used to search for a
    bookmark in the config file.

    All other destinations are used to search for a subdirectory of the
    directory given by the previous destination. Besides dots (. and ..)
    and regular expressions, which function as expected, F and L can be
    used to select the first and last subdirectory in the sorted list of
    subdirectories.

    Regular expression searches use grep -E -i -m 1 (exteneded regular
    expressions, ignore case, only first match). Unless the regular
    expression begins with an anchor (^), a match at the beginning is tried
    first, then a match anywhere.

    jump only prints the found directory. A function is needed to really
    change the working directory (see examples).

Options
    -s, --save FILE         Set file where the directory is saved
    -c, --config FILE       Set config file
    -v, --view-config       View config file
    -e, --edit-config       Edit config file
    -w, --which-config      Show path of config file

Examples
    # Add bookmark
    echo 'doc /usr/share/doc' >> $(jump -w)

    # Jump to the bookmarked dir, or to one of its subdirs
    jump doc                    # /usr/share/doc
    jump doc bash               # /usr/share/doc/bash
    jump d fbdev                # /usr/share/doc/xserver-xorg-video-fbdev
    jump d apa ex               # /usr/share/doc/apache2/examples

    # Jump to some other dirs
    jump /usr loc src           # /usr/local/src
    jump ~ \\.moz fir def       # ~/.mozilla/firefox/m2ivam4k.default

    # A function is needed to really jump
    j() { jump -s ~/.jump "$@" && cd "$(cat ~/.jump)"; }
    j doc bash
EOF
}

# Command line processing
TEMP=$(getopt \
        -l help,save:,config:,view-config,edit-config,which-config \
        -o hs:c:vew \
        -- "$@") || die INVOPT
eval set -- "$TEMP"

while true; do
    case "$1" in
        -h|--help)
            showhelp
            exit;;
        -s|--save)
            SAVEFILE="$2"
            shift 2;;
        -c|--config)
            CONFIGFILE="$2"
            shift 2;;
        -v|--view-config)
            MODE="view-config"
            shift;;
        -e|--edit-config)
            MODE="edit-config"
            shift;;
        -w|--which-config)
            MODE="which-config"
            shift;;
        --)
            shift
            break;;
        -*)
            die UNPROCOPT;;
    esac
done

# Check that mode is not something unexpected
inlist "$MODE" $ALLOWEDMODES || die NOMODE

# Check that config file exists if mode requires so
if ! inlist "$MODE" edit-config which-config; then
    [ -f "$CONFIGFILE" ] || die NOTFILE "$CONFIGFILE"
fi

# If mode is not jump, call appropriate function
if ! inlist "$MODE" jump dry-run; then
    ${MODE//-/}
    exit 9
fi

# Set directory to jump to
if [ -z "$1" ]; then
    JUMPDIR="$HOME"
else
    setjumpdir "$@"
fi

# Print...
echo "$JUMPDIR"

# Save...
if [ -n "$SAVEFILE" ]; then
    echo "$JUMPDIR" 2>/dev/null >"$SAVEFILE" || die MKFILE "$SAVEFILE"
fi

