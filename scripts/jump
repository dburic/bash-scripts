#!/bin/bash 

##include head.sh
sourcelib "common"

# Defaults
CONFIGFILE="$CONFIGDIR/jump.conf" # File with bookmarks and directories
BOOKMARKS=() # Config file bookmarks
DIRS=() # Config file directories
JUMPDIR="" # Final directory to jump to
SAVEFILE="" # File where $JUMPDIR should be saved
MODE="jump" # What to do
ALLOWEDMODES="jump view-config edit-config which-config" # What can be done
GREP="grep -i -m 1" # How to call grep
MATCHANYWHERE=false # Match anywhere, not only at beginning

# Additional error messages
adderrormsgs \
    NOMODE 'unknown mode, this should not happen' \
    NODEST 'unknown destination %s'

# Add bookmark and directory
addbookmarkdir() {
    BOOKMARKS+=("$1") 
    DIRS+=("$2")
}

# Read configuration file
readconfig() {
    local l
    while read -r l || [ -n "$l" ]; do
        case "$l" in 
            "#"*|"")
                continue;;
        esac
        eval -- "addbookmarkdir $l"
    done < "$CONFIGFILE"
}

# View config file
viewconfig() {
    cat "$CONFIGFILE"
}

# Edit config file
editconfig() {
    local editor="${EDITOR:-editor}"
    $editor "$CONFIGFILE"
}

# Show path of config file
whichconfig() {
    echo "$CONFIGFILE"
}

# Return regex pattern for grep
greppattern() {
    local pat=""
    $MATCHANYWHERE && pat="$1" || pat="^$1"
    echo "$pat"
}

# Get directory from bookmarks
getfrombookmarks() {
    local dest="$1"
    readconfig
    local pat=$(greppattern "$dest")
    local k=$(printf '%s\n' "${BOOKMARKS[@]}" | $GREP -n "$pat" | cut -d: -f1)
    [ -z "$k" ] && return # No match
    (( k-- ))
    echo "${DIRS[$k]}"
}

# Get subdirectory of given directory
getsubdir() {
    local dest="$1" dir="$2"
    local pat=$(greppattern "$dest")
    find -L "$dir" -mindepth 1 -maxdepth 1 -type d -printf '%f\n' | sort | $GREP "$pat"
}

# Add part to final directory
addpart() {
    local part="$1"
    case "$JUMPDIR" in
        ""|*/) # Empty or ends with slash
            JUMPDIR+="$part";;
        *) # Everything else
            JUMPDIR+="/$part";;
    esac
}

# Set directory to jump to
setjumpdir() {
    local dest part
    while [ $# -gt 0 ]; do
        dest="$1"
        shift
        [ -n "$dest" ] || continue
        if [ -z "$JUMPDIR" ]; then # First pass
            case "$dest" in
                ".")
                    part=$(pwd);;
                "/"*)
                    [ -d "$dest" ] && part="$dest" || part="";;
                *)
                    part=$(getfrombookmarks "$dest");;
            esac
        else # Not first pass
            part=$(getsubdir "$dest" "$JUMPDIR")
        fi
        [ -z "$part" ] && errorexit NODEST "$dest"
        addpart "$part"
    done
}

# Show a nice help message
showhelp() {
    cat <<"EOF"
jump - quickly jump to a directory

Usage
    jump [OPTION...] [DESTINATION...]

Description
    The first destination can be be an absolute path to a directory, a
    dot . for the current directory, a tilde ~ for the home directory,
    or a regular expression used to search for a bookmark in the config
    file. 

    All other destinations are regular expression used to search for a
    subdirectory of the directory given by the previous destination. 

    The search is case insesitive, and is by default anchored to the
    beginning of the bookmark or the directory name. Only the first
    match is used.

    jump only prints the found directory. A function is needed to really
    change the working directory (see examples).

Options
    -s, --save FILE         Set file where the directory is saved
    -c, --config FILE       Set config file
    -v, --view-config       View config file
    -e, --edit-config       Edit config file
    -w, --which-config      Show path of config file
    -a, --anywhere          Match anywhere, not only at the beginning

Examples
    # Add bookmark
    echo 'sysdoc /usr/share/doc' >> $(jump -w)

    # Jump to the bookmarked dir, or to one of its subdirs
    jump sysdoc                 # /usr/share/doc
    jump sysdoc bash            # /usr/share/doc/bash
    jump s.*c py.*7 h           # /usr/share/doc/python2.7/html

    # Jump to some other dirs
    jump /usr loc src           # /usr/local/src
    jump -a ~ ^\\.moz fir def   # ~/.mozilla/firefox/m2ivam4k.default

    # A function is needed to really jump
    j() { jump -s ~/.jump "$@" && cd "$(cat ~/.jump)"; }
    j sysdoc bash
EOF
}

# Command line processing
TEMP=$(getopt \
        -l help,save:,config:,view-config,edit-config,which-config,anywhere \
        -o hs:c:vewa \
        -- "$@") || errorexit INVOPT
eval set -- "$TEMP"

while true; do
    case "$1" in
        -h|--help)
            showhelp
            exit;;
        -s|--save)
            SAVEFILE="$2"
            shift 2;;
        -c|--config)
            CONFIGFILE="$2"
            shift 2;;
        -v|--view-config)
            MODE="view-config"
            shift;;
        -e|--edit-config)
            MODE="edit-config"
            shift;;
        -w|--which-config)
            MODE="which-config"
            shift;;
        -a|--anywhere)
            MATCHANYWHERE=true
            shift;;
        --)
            shift
            break;;
        -*)
            errorexit UNPROCOPT;;
    esac
done

# Check that mode is not something unexpected
inlist "$MODE" $ALLOWEDMODES || errorexit NOMODE

# Check that config file exists if mode requires so
if ! inlist "$MODE" edit-config which-config; then
    [ -f "$CONFIGFILE" ] || errorexit NOTFILE "$CONFIGFILE"
fi

# If mode is not jump, call appropriate function
if ! inlist "$MODE" jump dry-run; then
    ${MODE//-/}
    exit 9
fi

# Set directory to jump to
if [ -z "$1" ]; then 
    JUMPDIR="$HOME"
else
    setjumpdir "$@"
fi

# Print...
echo "$JUMPDIR"

# Save...
if [ -n "$SAVEFILE" ]; then
    echo "$JUMPDIR" 2>/dev/null >"$SAVEFILE" || errorexit MKFILE "$SAVEFILE"
fi

