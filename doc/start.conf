# === start configuration file ===

# vim: ft=sh

# This is an example configuration file for start.

# This is a standard bash file.

# --- Type conditions ---

# Type conditions determine the type of the file. They are evaluated in
# the orther specified, until the first matching condition. Each line
# here begins with ext, name, path, or mime, for matching against the
# extension, basename, absolute path, or MIME type (as returned by file
# -i) of the file. The first argument is a grep extended regular
# expression, and the second argument is the file type returned if there
# is a match.

ext '^pdf$' pdf

ext '^djvu$' djvu
ext '^e?ps$' ps
ext '^dvi$' dvi

ext '^x?html?$' html
ext '^xml$' xml
ext '^(mht|maff)$' webarchive

ext '^epub$' epub
ext '^chm$' chm
ext '^(chm|azw3|epub|mobi)$' ebook

ext '^od[bfgpst]$' libreoffice
ext '^sx[cdimw]$' openoffice
ext '^(doc|dot|xls|ppt)x?$' msoffice

name '^.bashrc$' bashrc

mime '^text/' text
mime '^image/' image
mime '^audio/' audio
mime '^video/' video

path '/media/music' music

# --- Use conditions ---

# This line specifies the default starting mode for use conditions
# without a mode, and should appear before use conditions. This setting
# is optional, and if not specified, a default mode of view will be
# used.

defaultmode view

# Use conditions determine the program that will be used to start the
# file. For a use condition to match, file type and starting mode must
# match (ie be equal to the ones specified here). As type conditions,
# use conditions are evaluated in the order listed, until the first
# matching condition. Each line here specifies the program to be used,
# supported file types, and zero or more starting modes, in the form
#
#   use PROGRAM TYPE... [-m MODE...] 
#
# If no starting mode is specified, then the default starting mode
# (see above) is used.
#
# The desired starting mode is something like view, edit, play etc,
# which can be specified on the command line, and can affect the way the
# file is started. The starting mode is passed to the starter (see
# below), if one is implemented, and it is up to the starter to decide
# what to do with it.
#
# If no starting mode is given on the command line, then the first mode
# specified in the use condition is used.

use acroread        pdf
use djview          djvu
use evince          ps dvi

use firefox         html xml webarchive

use lucidor         epub
use xchm            chm
use ebook-viewer    ebook

use libreoffice     libreoffice openoffice msoffice -m edit view

use less            text bashrc
use vim             text bashrc         -m edit

use geeqie          image               -m view
use gimp            image               -m edit

use qmmp            audio music         -m view play enq enqueue

use mplayer         video               -m view play

# --- Starters ---

# Starters are optional, and if no starter is defined below, then a
# program is disowned after beeing started. This does not work if the
# started program needs to use the terminal. Programs that are not
# supposed to be disowned should be listed here.

nodisown less vim

# Starters are optional functions of the form start_PROGRAM, whose job
# is to start specific programs. Starters will probably use variables
# like $MODE (starting mode) and $FILE (file to pass to the program).

start_libreoffice() {
    local args=""
    [ "$MODE" = "view" ] && args+=" --view"
    libreoffice $args "$FILE" & disown
}

start_qmmp() {
    local args=""
    case "$MODE" in
        enq|enqueue) args+=" -e";;
    esac
    qmmp $args "$FILE" & disown
}

start_lucidor() {
    lucidor "$FILE" >/dev/null 2>&1 & disown
}

start_geeqie() {
    geeqie "$FILE" >/dev/null 2>&1 & disown
}

start_mplayer() {
    mplayer -really-quiet "$FILE" & disown
}

