#!/bin/bash 

LIBDIR=$(cd "${BASH_SOURCE[0]%/*}/../lib/bash-scripts" 2>/dev/null && pwd); LIBDIR=${LIBDIR:-.}
source "$LIBDIR/common.sh"

# Defaults
SAVETOFILE="$STATEDIR/batch"
COMMANDS="add clear edit print dump move copy"
FILES=()
CLEAR=false
TARGETDIR="."

# Show a nice help message
showhelp() {
    cat <<"EOF"
batch - move, copy or otherwise process files in batches

Usage
    batch [OPTION...] [COMMAND] [FILE...]

Description
    A batch is a text file containing the full paths of files given as
    arguments or read from stdin, one path per line. Files in a batch can
    be moved or copied together to the same target directory, imitating the
    cut/copy/paste functionality of graphical file managers. Other
    operations are also possible by printing a batch and piping it to
    xargs or some other program.

    Available commands:

        add     Add files to batch
        clear   Clear batch
        edit    Edit batch in text editor
        print   Print batch to stdout (default if no command is specified)
        dump    Print and clear
        move    Move files in batch
        copy    Copy files in batch

Options
    -s, --save-to FILE          Use specified file to save batch
    -c, --clear                 Clear batch before adding files
    -t, --target-dir DIR        Target directory for move and copy

Examples
    # Add files that need to be moved, cwd = /dir1
    batch -c add file1 file2

    # Optionally, go to another directory and add more files
    cd /dir2
    batch add filea fileb filec

    # Go to the destination directory and move all files there
    cd /dira/dirb
    batch dump | xargs -d\\n mv -t .

    # Same as above, without xargs
    batch move
EOF
}

iscommand() {
    inlist "$1" $COMMANDS
}

filesfromargs() {
    while [ $# -gt 0 ]; do 
        [ -z "$1" ] && continue
        FILES+=("$1")
        shift
    done
}

filesfromlist() {
    local list="$1" f
    while read -r f || [ -n "$f" ]; do
        [ -z "$f" ] && continue
        FILES+=("$f")
    done < <(cat "$list")
}

checkexist() {
    local f 
    for f in "${FILES[@]}"; do 
        [ -e "$f" ] || die NOTEXIST "$f"
    done
}

cmd_add() {
    filesfromargs "$@"
    [ -t 0 ] || filesfromlist "-"
    checkexist
    $CLEAR && cmd_clear
    realpath "${FILES[@]}" >> "$SAVETOFILE" || die "cannot add files to $SAVETOFILE"
}

cmd_clear() {
    > "$SAVETOFILE" || die "cannot clear $SAVETOFILE"
}

cmd_edit() {
    local editor="${EDITOR:-editor}"
    "$editor" "$SAVETOFILE"
}

cmd_print() {
    [ -f "$SAVETOFILE" ] && cat "$SAVETOFILE"
}

cmd_dump() {
    cmd_print
    cmd_clear
}

checktargetdir() {
    [ -d "$TARGETDIR" ] || die NOTDIR "$TARGETDIR"
}

cmd_copy() {
    checktargetdir
    cmd_dump | xargs -d\\n cp -t "$TARGETDIR"
}

cmd_move() {
    checktargetdir
    cmd_dump | xargs -d\\n mv -t "$TARGETDIR"
}

# Program starts here

# Command line processing
TEMP=$(getopt \
        -l help,save-to:,clear,target-dir: \
        -o hs:ct: \
        -- "$@") || die INVOPT
eval set -- "$TEMP"

while true; do
    case "$1" in
        -h|--help)
            showhelp
            exit;;
        -s|--save-to)
            SAVETOFILE="$2"
            shift 2;;
        -c|--clear)
            CLEAR=true
            shift;;
        -t|--target-dir)
            TARGETDIR="$2"
            shift 2;;
        --)
            shift
            break;;
        -*)
            die UNPROCOPT;;
    esac
done

[ $# -eq 0 ] && { cmd_print; exit; }

iscommand "$1" || die "$1 is not a command"
COMMAND="$1"
shift

mkdirordie "$STATEDIR"

cmd_$COMMAND "$@"

