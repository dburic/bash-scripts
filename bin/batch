#!/bin/bash 

LIBDIR=$(cd "${BASH_SOURCE[0]%/*}/../lib/bash-scripts" 2>/dev/null && pwd); LIBDIR=${LIBDIR:-.}
source "$LIBDIR/common.sh"

# Defaults
DATADIR="$HOME/.local/share/scripts"
LISTFILE="$DATADIR/remlist"
COMMANDS="new add clear edit print dump copy move"
FILES=()

# Show a nice help message
showhelp() {
    cat <<"EOF"
rem - remember location of files for later use

Usage
    rem [COMMAND] [FILE...]

Description
    The full path of files given as arguments or read from stdin is stored
    in a list for later use.

    Available commands:

        new     Clear list and add files to list
        add     Add files to list
        clear   Clear list
        edit    Edit list in text editor
        print   Print list to stdout
        dump    Print and clear list of files
        copy    Copy files in list
        move    Move files in list

Options
    -l, --list FILE         Use this file to store the list

Examples
    # Remember some files that need to be moved, pwd = /dir1
    rem new file1 file2

    # Optionally, go to another directory and remember more files
    cd /dir2
    rem add filea fileb filec

    # Go to the destination directory and move all files there
    cd /dira/dirb
    rem dump | xargs -d\\n mv -t . 

    # Same as above, without xargs
    rem move
EOF
}

iscommand() {
    inlist "$1" $COMMANDS
}

cmd_new() {
    cmd_clear
    cmd_add "$@"
}

filesfromargs() {
    while [ $# -gt 0 ]; do 
        [ -z "$1" ] && continue
        FILES+=("$1")
        shift
    done
}

filesfromlist() {
    local list="$1" f
    while read -r f || [ -n "$f" ]; do
        [ -z "$f" ] && continue
        FILES+=("$f")
    done < <(cat "$list")
}

checkexist() {
    local f 
    for f in "${FILES[@]}"; do 
        [ -e "$f" ] || die NOTEXIST "$f"
    done
}

cmd_add() {
    filesfromargs "$@"
    [ -t 0 ] || filesfromlist "-"
    checkexist
    realpath "${FILES[@]}" >> "$LISTFILE" || die "cannot add files to $LISTFILE"
}

cmd_clear() {
    > "$LISTFILE" || die "cannot clear $LISTFILE"
}

cmd_edit() {
    local editor="${EDITOR:-editor}"
    "$editor" "$LISTFILE"
}

cmd_print() {
    [ -f "$LISTFILE" ] || die NOTFILE "$LISTFILE"
    cat "$LISTFILE"
}

cmd_dump() {
    cmd_print
    cmd_clear
}

cmd_copy() {
    cmd_dump | xargs -d\\n cp -t . 
}

cmd_move() {
    cmd_dump | xargs -d\\n mv -t .
}

# Program starts here

# Command line processing
TEMP=$(getopt \
        -l help,list: \
        -o hl: \
        -- "$@") || die INVOPT
eval set -- "$TEMP"

while true; do
    case "$1" in
        -h|--help)
            showhelp
            exit;;
        -l|--list)
            LISTFILE="$2"
            shift 2;;
        --)
            shift
            break;;
        -*)
            die UNPROCOPT;;
    esac
done

[ $# -eq 0 ] && { cmd_print; exit; }

iscommand "$1" || die "$1 is not a command"
COMMAND="$1"
shift

mkdirifne "$DATADIR"

cmd_$COMMAND "$@"

