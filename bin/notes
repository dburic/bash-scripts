#!/bin/bash

LIBDIR=$(cd "${BASH_SOURCE[0]%/*}/../lib/bash-scripts" 2>/dev/null && pwd); LIBDIR=${LIBDIR:-.}
source "$LIBDIR/common.sh"

# Global variables and default values
MAINCONF="$CONFIGDIR/notes.conf" # Main (default) config
NOTESCONF=".notes.conf" # Basename of local config
LOCALCONF="" # Full path to local config - if found, otherwise empty
LCPARLEV=1 # Search for local config this many levels above cwd (0 = disable, -1 = no limit)
TITLEFORMAT='# %s\n' # printf format for title
IMPORTDIR="res" # Directory for imported files (resources)
OUTPUT="" # Output filename when adding a note - empty for default using title2filename
STDOUT=false # Print note to stdout instead of storing to file
OVERWRITE=false # Overwrite output file for new note
EDITNEW=false # Open newly created note in editor
EDITOR="${EDITOR:-editor}" # Editor to use for editing
NOTESEXT=".txt" # File extension for notes

# Show a nice help message
showhelp() {
    cat <<"EOF"
notes - manage text notes

Usage
    notes [OPTION...] COMMAND [ARG...]

Description
    The purpose of this program is to help with the management of text notes.
    Below is a list of supported commands.

    The program has a main (per user), and a local (per set of notes)
    configuration file, which are expected to be valid shell scripts and are
    sourced by the program.

    A note is a text file whose first line contains the note title. No other
    assumptions are made about the structure of a note. A text editor should be
    used to enter and maintain the content of notes.

    A set of notes consists of all notes residing in a directory.

    A new note is added/created by specifying its title, from which the name of
    the file that will contain the note is derived.

    Additional resources (images, documents, ...) can be imported (stored in a
    subdirectory of the set of notes) using the appropriate command.

Commands
    add TITLE       Create new note
    list            List all notes in current directory
    last [N]        List most recently modified notes
    import FILE...  Import files (images, documents, ...)

Options
    -o, --output FILE       Set output filename for new note
        --stdout            Print new note on stdout only
    -x, --overwrite         Overwrite output file for new note if it exists
    -e, --edit              Open newly created note in editor
    -d, --import-dir DIR    Directory for imported files

Examples
    # Create a directory and a local config file (optional)
    mkdir notes
    cd $_
    touch .notes.conf

    # Create new notes
    notes add First Note
    notes add Second Note

    # Add image
    notes import ~/screenshot.png

    # List all notes with title
    notes list

    # Last 5 modified notes
    notes last 5
EOF
}

cmdfunc() {
    echo "cmd_$1"
}

iscommand() {
    isfunction "$(cmdfunc "$1")"
}

# Read config file
readconf() {
    [ -n "$1" -a -f "$1" ] && { source "$1" || die RC "$1"; }
}

# Find local conf file
findlocalconf() {
    local d=$(pwd)
    local c l
    isint "$LCPARLEV" && l=$LCPARLEV || l=0
    while true; do
        c="$d/$NOTESCONF"
        if [ -f "$c" ]; then
            LOCALCONF="$c"
            return
        fi
        [ $l -eq 0 ] && return
        [ $d = "/" ] && return
        d=$(dirname "$d")
        (( l-- ))
    done
}

# Arguments to title
args2title() {
    echo "$*"
}

# Title to filename
title2filename() {
    echo "$1" | tr '[:upper:] ' '[:lower:]-'
}

# Print title
printtitle() {
    printf "$TITLEFORMAT" "$1"
}

# List of notes with title
listnotes() {
    local date="%TY-%Tm-%Td"
    local time="%TH:%TM:%.2TS"
    local size="%s"
    local filename="%f"
    find -mindepth 1 -maxdepth 1 -name "*$NOTESEXT" \
        -printf "$date\t$time\t$size\t$filename\t" \
        -exec head -n 1 '{}' ';'
}

# Import a single file
importfile() {
    cp "$1" "$2" && echo "$2" || warn "cannot import $1"
}

# Commands

cmd_add() {
    local fn
    local title=$(args2title "$@")
    if $STDOUT; then
        printtitle "$title"
    else
        if [ -z "$OUTPUT" ]; then
            fn="$(title2filename "$title")$NOTESEXT"
        else
            fn="$OUTPUT"
        fi
        if [ -e "$fn" ]; then
            $OVERWRITE || die EXIST "$fn"
        fi
        printtitle "$title" > "$fn" && echo "$fn" || die "cannot create $fn"
        $EDITNEW && "$EDITOR" "$fn"
    fi
}

cmd_list() {
    listnotes
}

cmd_last() {
    local n
    ispsint "$1" && n=$1
    listnotes | sort -r -k1,2 | { [ -z "$n" ] && cat || head -n $n; }
}

cmd_import() {
    local src dest
    mkdir -p "$IMPORTDIR" || die MKDIR "$d"
    for src; do
        [ -f "$src" ] || { warn "$src is not a file - skipping"; continue; }
        dest="$IMPORTDIR/$(basename "$src")"
        importfile "$src" "$dest"
    done
}

# Program starts here

# Command line processing
TEMP=$(getopt \
        -l help,output:,stdout,overwrite,edit \
        -o ho:xe \
        -- "$@") || die INVOPT
eval set -- "$TEMP"

while true; do
    case "$1" in
        -h|--help)
            showhelp
            exit;;
        -o|--output)
            OUTPUT="$2"
            shift 2;;
        --stdout)
            STDOUT=true
            shift;;
        -x|--overwrite)
            OVERWRITE=true
            shift;;
        -e|--edit)
            EDITNEW=true
            shift;;
        -d|--import-dir)
            IMPORTDIR="$2"
            shift 2;;
        --)
            shift
            break;;
        -*)
            die UNPROCOPT;;
    esac
done

readconf "$MAINCONF"
findlocalconf
readconf "$LOCALCONF"

[ $# -eq 0 ] && die MISSCMD
iscommand "$1" || die NOTCMD "$1"
COMMAND="$1"
shift

$(cmdfunc "$COMMAND") "$@"

